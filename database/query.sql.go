// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const getCustomer = `-- name: GetCustomer :one
SELECT id, nome, saldo, limite FROM clientes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Saldo,
		&i.Limite,
	)
	return i, err
}

const getLastTransactions = `-- name: GetLastTransactions :many
SELECT valor, tipo, descricao, realizada_em FROM transacoes
WHERE cliente_id = $1 ORDER BY id DESC LIMIT 10
`

type GetLastTransactionsRow struct {
	Valor       int32     `db:"valor"`
	Tipo        string    `db:"tipo"`
	Descricao   string    `db:"descricao"`
	RealizadaEm time.Time `db:"realizada_em"`
}

func (q *Queries) GetLastTransactions(ctx context.Context, clienteID int32) ([]GetLastTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLastTransactions, clienteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastTransactionsRow
	for rows.Next() {
		var i GetLastTransactionsRow
		if err := rows.Scan(
			&i.Valor,
			&i.Tipo,
			&i.Descricao,
			&i.RealizadaEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transacoes (
  cliente_id, valor, tipo, descricao
) VALUES (
  $1, $2, $3, $4
)
`

type InsertTransactionParams struct {
	ClienteID int32  `db:"cliente_id"`
	Valor     int32  `db:"valor"`
	Tipo      string `db:"tipo"`
	Descricao string `db:"descricao"`
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.ExecContext(ctx, insertTransaction,
		arg.ClienteID,
		arg.Valor,
		arg.Tipo,
		arg.Descricao,
	)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :many
UPDATE clientes
  set saldo = saldo + $2
WHERE id = $1
RETURNING id, nome, saldo, limite
`

type UpdateCustomerParams struct {
	ID    int32 `db:"id"`
	Saldo int32 `db:"saldo"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, updateCustomer, arg.ID, arg.Saldo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Saldo,
			&i.Limite,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
